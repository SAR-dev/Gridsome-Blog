{"remainingRequest":"E:\\Projects\\Comicsghor Gridsome Blog\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\Projects\\Comicsghor Gridsome Blog\\src\\components\\SearchInput.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\Projects\\Comicsghor Gridsome Blog\\src\\components\\SearchInput.vue","mtime":1581731899000},{"path":"E:\\Projects\\Comicsghor Gridsome Blog\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\Projects\\Comicsghor Gridsome Blog\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\Projects\\Comicsghor Gridsome Blog\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\Projects\\Comicsghor Gridsome Blog\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport axios from 'axios'\nimport SearchFocus from './SearchFocus'\n\nexport default {\n  components: {\n    SearchFocus,\n  },\n  created() {\n    axios(this.$static.metadata.pathPrefix + \"/search.json\").then(response => {\n      this.posts = response.data\n    })\n    .catch(error => {\n      console.log(error);\n    })\n  },\n  data() {\n    return {\n      query: '',\n      results: [],\n      posts: [],\n      highlightedIndex: 0,\n      searchResultsVisible: false,\n      options: {\n        shouldSort: true,\n        includeMatches: true,\n        threshold: 0.5,\n        location: 0,\n        distance: 500,\n        maxPatternLength: 32,\n        minMatchCharLength: 1,\n        keys: ['title', 'summary']\n      }\n    }\n  },\n  methods: {\n    reset() {\n      this.query = ''\n      this.highlightedIndex = 0\n    },\n    softReset() {\n      this.highlightedIndex = 0\n      this.searchResultsVisible = true\n    },\n    performSearch() {\n      this.$search(this.query, this.posts, this.options).then(results => {\n        this.results = results\n      })\n    },\n    highlightPrev() {\n      if (this.highlightedIndex > 0) {\n        this.highlightedIndex = this.highlightedIndex - 1\n        this.scrollIntoView()\n      }\n    },\n    highlightNext() {\n      if (this.highlightedIndex < this.results.length - 1) {\n        this.highlightedIndex = this.highlightedIndex + 1\n        this.scrollIntoView()\n      }\n    },\n    scrollIntoView() {\n      this.$refs.results.children[this.highlightedIndex].scrollIntoView({ block: 'nearest' })\n    },\n    gotoLink() {\n      if (this.results[this.highlightedIndex]) {\n        window.location = this.results[this.highlightedIndex].item.path\n      }\n    },\n    focusSearch(e) {\n      if (e.key === '/') {\n        this.$refs.search.focus()\n      }\n    }\n  }\n}\n",null]}